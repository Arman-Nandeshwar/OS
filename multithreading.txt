#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define CORE 4
#define MAX 4

pthread_t thread[CORE * 4];
int mat_A[MAX][MAX], mat_B[MAX][MAX], sum[MAX][MAX], sub[MAX][MAX], mul[MAX][MAX];
float divi[MAX][MAX];

void* addition(void* arg) {
    int i, j;
    int core = (int)arg;

    for (i = core * MAX / 4; i < (core + 1) * MAX / 4; i++) {
        for (j = 0; j < MAX; j++) {
            sum[i][j] = mat_A[i][j] + mat_B[i][j];
        }
    }
}

void* subtraction(void* arg) {
    int i, j;
    int core = (int)arg;

    for (i = core * MAX / 4; i < (core + 1) * MAX / 4; i++) {
        for (j = 0; j < MAX; j++) {
            sub[i][j] = mat_A[i][j] - mat_B[i][j];
        }
    }
}

void* multiplication(void* arg) {
    int i, j;
    int core = (int)arg;

    for (i = core * MAX / 4; i < (core + 1) * MAX / 4; i++) {
        for (j = 0; j < MAX; j++) {
            mul[i][j] = mat_A[i][j] * mat_B[i][j];
        }
    }
}

void* division(void* arg) {
    int i, j;
    int core = (int)arg;

    for (i = core * MAX / 4; i < (core + 1) * MAX / 4; i++) {
        for (j = 0; j < MAX; j++) {
            divi[i][j] = (float)mat_A[i][j] / mat_B[i][j];
        }
    }
}

int main() {
    int i, j, step = 0;

    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++) {
            mat_A[i][j] = rand() % 10;
            mat_B[i][j] = rand() % 10;
        }
    }

    printf("\nMatrix A:\n");
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++) {
            printf("%d ", mat_A[i][j]);
        }
        printf("\n");
    }

    printf("\nMatrix B:\n");
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++) {
            printf("%d ", mat_B[i][j]);
        }
        printf("\n");
    }

    for (i = 0; i < CORE; i++) {
        pthread_create(&thread[i], NULL, &addition, (void*)step);
        pthread_create(&thread[i + CORE], NULL, &subtraction, (void*)step);
        pthread_create(&thread[i + 2 * CORE], NULL, &multiplication, (void*)step);
        pthread_create(&thread[i + 3 * CORE], NULL, &division, (void*)step);
        step++;
    }

    for (i = 0; i < CORE * 4; i++) {
        pthread_join(thread[i], NULL);
    }

    printf("\nSum of Matrix A and B:\n");
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++) {
            printf("%d ", sum[i][j]);
        }
        printf("\n");
    }

    printf("\nSubtraction of Matrix A and B:\n");
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++) {
            printf("%d ", sub[i][j]);
        }
        printf("\n");
    }

    printf("\nMultiplication of Matrix A and B:\n");
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++) {
            printf("%d ", mul[i][j]);
        }
        printf("\n");
    }

    printf("\nDivision of Matrix A and B:\n");
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++) {
            printf("%.2f ", divi[i][j]);
        }
        printf("\n");
    }

    return 0;
}
